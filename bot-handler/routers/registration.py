from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.enums import bot_command_scope_type
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger

from services import RegistrationService, UserSchema
from states import Registration


registration_router = Router(name='Registration')


@registration_router.message(CommandStart())
async def start_registration(message: Message, state: FSMContext, session: AsyncSession):
    """
    Handle /start command
    :param message:
    :param state: Catching other contexts to clean them up
    :param session: Database connection
    """
    await state.clear()
    user_id = message.from_user.id
    # Check user registration
    is_registered = await RegistrationService.verify(session, user_id)

    if not is_registered:
        await state.set_state(Registration.name)
        await state.update_data(telegram_id=user_id)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∞–Ω—É –∑–∞–º–µ—Ç–æ–∫ üó∫\n"
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚úçÔ∏è\n"
            "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?"
        )
        logger.info(f"New user {message.from_user.username} start registration")
        return

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∞–Ω—É –∑–∞–º–µ—Ç–æ–∫ üó∫\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:\n"
        "/addnote \n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n"
        "/mynotes"
    )


@registration_router.message(Registration.name, F.text.as_("name"))
async def process_name(message: Message, state: FSMContext, name: str):
    """
    Handle username during registration process
    :param message: Telegram message
    :param state: Registration context
    :param name: Result username
    """
    # Save username
    await state.update_data(name=name)
    await state.set_state(Registration.email)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω –ø—É–Ω–∫. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É ‚úâÔ∏è")


@registration_router.message(
    Registration.email,
    F.text.regexp(r"^[-\w\.]+@([-\w]+\.)+[-\w]{2,4}$"),  # Simple regex for email validation
    F.text.as_('email')
)
async def process_email(message: Message, state: FSMContext, session: AsyncSession, email: str):
    """
    Handle VALID email during registration process
    :param message: telegram message
    :param state: Registration context
    :param session: Database session
    :param email: filter result of email validation
    """
    await state.update_data(email=email)

    user_data = await state.get_data()
    new_user = UserSchema(telegram_id=int(user_data['telegram_id']), name=user_data['name'], email=user_data['email'])
    # Register new user
    await RegistrationService.registration(session, new_user)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∞–Ω—É –∑–∞–º–µ—Ç–æ–∫ üó∫\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:\n"
        "/addnote \n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n"
        "/mynotes"
    )
    await state.clear()
    logger.info(f"User {message.from_user.username} successfully registered")


@registration_router.message(Registration.email)
async def invalid_email(message: Message):
    """
    Handle INVALID email during registration process
    :param message: Telegram message
    """
    await message.answer(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: name@mail.com"
    )
